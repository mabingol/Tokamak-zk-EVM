import React, { useState } from 'react';
import { fetchTransactionBytecode } from '../utils/etherscanApi';
import { Buffer } from 'buffer';
import { createEVM } from '../../frontend/synthesizer/src/constructors';
import { hexToBytes } from '../../frontend/synthesizer/libs/util/dist/esm/index.js';
import { Address } from '../../frontend/synthesizer/libs/util/dist/esm/index.js';
// import { Account } from '../../frontend/synthesizer/libs/util/dist/esm/index.js';
// import { keccak256 } from 'ethereum-cryptography/keccak'
import { formatLogsStructured, FormattedLog } from '../utils/formatLog';
import { ERC20_CONTRACT_CODE } from './constant/evm.js';
import { setupEVM } from '../utils/setupEVM';
window.Buffer = window.Buffer || Buffer;
function serializePlacements(placements: any) {
    const convertValue = (val: any): any => {
        if (typeof val === 'bigint') {
            return val.toString();
        }
        if (Array.isArray(val)) {
            return val.map(convertValue);
        }
        if (typeof val === 'object' && val !== null) {
            return Object.fromEntries(
                Object.entries(val).map(([k, v]) => [k, convertValue(v)])
            );
        }
        return val;
    };

    return JSON.stringify({
        placements: convertValue(placements)
    });
}
 

const App: React.FC = () => {
  const [transactionId, setTransactionId] = useState('');
  const [status, setStatus] = useState<string | null>(null);
  const [serverData, setServerData] = useState<{ permutation: string | null; placementInstance: string | null } | null>(null);
  const [logs, setLogs] = useState<FormattedLog[] | null>(null);

  const handleSubmit = async () => {
    try {
      setStatus('Fetching bytecode from Etherscan...');
      setLogs(null);
      setServerData(null);

      // 1) Fetch the bytecode
      const {bytecode, from, to} = await fetchTransactionBytecode(transactionId);
      if (!bytecode || bytecode.length < 2) {
        throw new Error('Invalid bytecode received. Check your transaction ID.');
      }

      const contractCode = ERC20_CONTRACT_CODE

      console.log("bytecode", bytecode)

      // 2) Run the EVM
      setStatus('Creating and running the EVM...');
      const evm = await createEVM();

       const contractAddr = new Address(hexToBytes('0xdac17f958d2ee523a2206206994597c13d831ec7'))
      const sender = new Address(hexToBytes(from))
      
      await setupEVM(evm, from, contractCode, contractAddr, sender)

      const res = await evm.runCode({
        caller: sender,
        to: contractAddr,
        code: contractCode,
        data: hexToBytes(
          bytecode
        ),
      });

      console.log('res', res)

      if (res.logs) {
        console.log("res.logs", res.logs)
        const formattedLogs = formatLogsStructured(res.logs)
        console.log("formattedLogs", formattedLogs)
        setLogs(formattedLogs)
      }

      if (!res.runState?.synthesizer?.placements) {
        throw new Error('No placements generated by the synthesizer.');
      }

      // Convert placements to a plain object
      const rawMap = res.runState.synthesizer.placements;
      const placementsObj = Object.fromEntries(rawMap.entries());


      // 3) Send placements to the server
      setStatus('Finalizing placements on the server...');
      const response = await fetch('api/finalize', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
              body: serializePlacements(placementsObj)
      });

      if (!response.ok) {
        throw new Error(`Server returned status ${response.status}`);
      }

      const json = await response.json();
      if (!json.ok) {
        throw new Error(json.error || 'Unknown server error.');
      }

      // Extract server response
      const { permutation, placementInstance } = json.data || {};
      setServerData({ permutation, placementInstance });
      setStatus('Process complete! Files are ready for download.');
    } catch (error) {
      console.error('Error:', error);
      setStatus(`Error: ${error instanceof Error ? error.message : String(error)}`);
      setServerData(null);
    }
  };



  // Handle file download
  const handleDownload = (fileContent: string | null, fileName: string) => {
    if (!fileContent) return;
    const blob = new Blob([fileContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    link.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div style={{ padding: '20px' }}>
      <h1>Synthesizer Developer Playground</h1>
      <input
        type="text"
        value={transactionId}
        onChange={(e) => setTransactionId(e.target.value)}
        placeholder="Enter Transaction ID"
        style={{
          padding: '10px',
          width: '300px',
          marginRight: '10px',
          border: '1px solid #ccc',
          borderRadius: '4px',
        }}
      />
      <button
        onClick={handleSubmit}
        style={{
          padding: '10px 20px',
          background: '#007bff',
          color: 'white',
          border: 'none',
          borderRadius: '4px',
          cursor: 'pointer',
        }}
      >
        Process
      </button>
     {logs?.map((log, index) => (
        <div key={index} style={{ 
          border: '1px solid #ddd', 
          borderRadius: '8px',
          padding: '16px',
          margin: '8px 0',
          backgroundColor: '#f9f9f9'
        }}>
          <div style={{ marginBottom: '8px' }}>
            <strong>Address:</strong> {log.address}
          </div>
          <div style={{ marginBottom: '8px' }}>
            <strong>Topics:</strong>
            <div style={{ marginLeft: '20px' }}>
              <div><strong>Signature:</strong> {log.topics.signature}</div>
              <div><strong>From:</strong> {log.topics.from}</div>
              <div><strong>To:</strong> {log.topics.to}</div>
            </div>
          </div>
          <div>
            <strong>Data:</strong>
            <div style={{ marginLeft: '20px' }}>
              <div><strong>Hex:</strong> {log.data.hex}</div>
              <div><strong>Value:</strong> {log.data.value}</div>
            </div>
          </div>
        </div>
      ))}
      <div style={{ marginTop: '20px' }}>
        {status && <p>{status}</p>}
        {serverData?.permutation && (
          <button
            onClick={() => handleDownload(serverData.permutation, 'permutation.ts')}
            style={{
              padding: '10px 20px',
              background: '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              marginRight: '10px',
            }}
          >
            Download Permutation
          </button>
        )}
        {serverData?.placementInstance && (
          <button
            onClick={() => handleDownload(serverData.placementInstance, 'placementInstance.ts')}
            style={{
              padding: '10px 20px',
              background: '#17a2b8',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
            }}
          >
            Download Placement Instance
          </button>
        )}
      </div>
    </div>
  );
};

export default App;
