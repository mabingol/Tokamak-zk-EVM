/* ===== Base Styles ===== */
.borderTop {
  align-self: stretch;
  position: relative;
  background-color: #a8a8a8;
  height: 1px;
}

.borderLeft {
  align-self: stretch;
  width: 1px;
  position: relative;
  background-color: #a8a8a8;
}

.inputText {
  position: relative;
  width: 100%;
  height: 100%;
  border: none;
  background: transparent;
  padding: 0 16px;
  font-family: 'IBM Plex Mono';
  font-size: 24px;
  outline: none;
}

/* Base placeholder color is now #999999 */
.inputText::placeholder {
  color: #999999;
}

.labelWrapper {
  flex: 1;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: flex-start;
  padding: 0px 0px 2px;
}

.borderRight {
  align-self: stretch;
  width: 1px;
  position: relative;
  background-color: #5f5f5f;
}

.horizontalAl {
  width: 550px;
  background-color: #f7f7f7;
  height: 57px;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.borderBottom {
  align-self: stretch;
  position: relative;
  background-color: #5f5f5f;
  height: 1px;
}

.borderBottom1 {
  align-self: stretch;
  position: relative;
  height: 1px;
}

.property1defalut {
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  text-align: left;
  font-size: 24px;
  color: #999;
  font-family: 'IBM Plex Mono';
}

/* ===== Hover Styles ===== */
.property1hover:not(.property1active):hover .horizontalAl {
  position: relative;
  background-color: #f7f7f7;
  height: 58px; /* increased height by 1px */
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 8px;
  text-align: left;
  font-size: 24px;
  color: #222222;
  font-family: 'IBM Plex Mono';
}

/* (Removed the hover rule that changed .borderRight so borders remain unchanged) */
/*
.property1hover:not(.property1active):hover .borderRight {
  width: 2px;
}
*/

.property1hover:not(.property1active):hover .inputText::placeholder {
  color: #222222;
}

/* In hover state the input text (but not the placeholder) remains #222222 */
.property1hover .inputText {
  color: #222222;
}

/* ===== Active Styles ===== */
.property1active {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  text-align: left;
  font-size: 24px;
  font-family: 'IBM Plex Mono';
}

.property1active .horizontalAl {
  color: #222222;
}

.property1active .inputText {
  color: #222222;
}

.property1active .inputText::placeholder {
  color: #222222;
}

/* ===== Disabled Styles ===== */
.property1disable {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  text-align: left;
  font-size: 24px;
  color: #444;
  font-family: 'IBM Plex Mono';
}

/* Override inner container background when disabled */
.property1disable .horizontalAl {
  background-color: #d0d0d7;
  height: 56px;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

/* ===== Error Styles ===== */
.property1error {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  text-align: left;
  font-size: 24px;
  color: #a01313;
  font-family: 'IBM Plex Mono';
}

/* Force the input text and placeholder to become red in error state */
.property1error .inputText {
  color: #a01313;
}

.property1error .inputText::placeholder {
  color: #a01313;
}

/* Ensure that even if the input is disabled in error state, the red color remains */
.property1error .inputText:disabled {
  color: #a01313;
}

.property1error .inputText:disabled::placeholder {
  color: #a01313;
}
